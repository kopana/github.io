{
  "api/Kount.Ris.Response.html": {
    "href": "api/Kount.Ris.Response.html",
    "title": "Class Response | Kount SDK .NET",
    "keywords": "Class Response Response immutable data object containing data from the RIS server. Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2010 Keynetics Inc Inheritance System.Object Response Namespace :Kount.Ris Assembly :KountRisSdk.dll Syntax public class Response : object Constructors Response(String) Response constructor. Declaration public Response(string raw) Parameters Type Name Description System.String raw Splits name=value formatted response string populating a hash for getters. Methods GetAuto() Get the automated Kount RIS response. Declaration public string GetAuto() Returns Type Description System.String (A)pprove, (R)eview, or (D)ecline. GetBrand() Get the brand of the credit card if a card was the payment method Declaration public string GetBrand() Returns Type Description System.String Brand of credit card, e.g. VISA GetBrowser() Get browser (derived from user agent string) Declaration public string GetBrowser() Returns Type Description System.String Browser string GetCards() Get the number of transactions associated with the credit card Declaration public string GetCards() Returns Type Description System.String Number of cards GetCookies() Get a string representing whether the remote device allows cookies Declaration public string GetCookies() Returns Type Description System.String \"Y\" or \"N\" GetCountersTriggered() Get a map of the rules counters triggered in the response. Declaration public IDictionary GetCountersTriggered() Returns Type Description IDictionary Map Key: counter name, Value: counter value. GetCountry() Get the remote device's country of origin as a two character code Declaration public string GetCountry() Returns Type Description System.String The country GetDateDeviceFirstSeen() Get date device first seen Declaration public string GetDateDeviceFirstSeen() Returns Type Description System.String Date device first seen GetDeviceLayers() Get a string representing the five layers (Operating System, SSL, HTTP, Flash, JavaScript) of the remote device Declaration public string GetDeviceLayers() Returns Type Description System.String Device layers GetDevices() Get the number of transactions associated with the particular device Declaration public string GetDevices() Returns Type Description System.String Number of devices GetDeviceScreenResolution() Get device screen resolution Declaration public string GetDeviceScreenResolution() Returns Type Description System.String Device screen resolution (HxW - Height by Width) GetEmails() Get the number of transactions associated with the email Declaration public string GetEmails() Returns Type Description System.String Number of emails GetErrorCode() Get the error code returned from the server Declaration public string GetErrorCode() Returns Type Description System.String Error code returned from the RIS server. GetErrorCount() Get the number of errors associated with the response. Declaration public int GetErrorCount() Returns Type Description System.Int32 Number of errors GetErrors() Get a map of the errors associated with the response. Declaration public List<string> GetErrors() Returns Type Description List < System.String > Array of errors GetFingerPrint() Get the device finger print Declaration public string GetFingerPrint() Returns Type Description System.String Finger print GetFlash() Get a string representing whether or not the remote device allows flash. Declaration public string GetFlash() Returns Type Description System.String \"Y\" or \"N\" GetGeox() Get the geo location of the client Declaration public string GetGeox() Returns Type Description System.String Geox of the client GetHttpCountry() Get the two character country code setting in the remote device's browser Declaration public string GetHttpCountry() Returns Type Description System.String Get the country GetIPAddress() Get proxy IP address Declaration public string GetIPAddress() Returns Type Description System.String Proxy IP Address GetIPAddressCity() Get city of proxy IP address Declaration public string GetIPAddressCity() Returns Type Description System.String City of proxy IP address GetIPAddressCountry() Get country of proxy IP address Declaration public string GetIPAddressCountry() Returns Type Description System.String Country of proxy IP address GetIPAddressLatitude() Get latitude of proxy IP address Declaration public string GetIPAddressLatitude() Returns Type Description System.String Latitude of proxy IP address GetIPAddressLongitude() Get longitude of proxy IP address Declaration public string GetIPAddressLongitude() Returns Type Description System.String Longitude of proxy IP address GetIPAddressOrganization() Get organization of proxy IP address Declaration public string GetIPAddressOrganization() Returns Type Description System.String Organization of proxy IP address GetIPAddressRegion() Get region of proxy IP address Declaration public string GetIPAddressRegion() Returns Type Description System.String Region of proxy IP address GetJavaScript() Get a string representing whether the remote device allows JavaScript Declaration public string GetJavaScript() Returns Type Description System.String \"Y\" or \"N\" GetKaptcha() Get the Kaptcha flag: enabled upon request and for when a RIS record has no Kaptcha data Declaration public string GetKaptcha() Returns Type Description System.String Returns Y or N GetKnowYourCustomer() Get the Know Your Customer flag Declaration public string GetKnowYourCustomer() Returns Type Description System.String Y means a KYC match, N means no match. GetKountCentralCustomerId() Get the Kount Central Customer ID Declaration public string GetKountCentralCustomerId() Returns Type Description System.String Kount Central Customer ID GetKountCentralDecision() Get the Kount Central Decision Declaration public string GetKountCentralDecision() Returns Type Description System.String The Kount Central Decision GetKountCentralErrorCount() Get the number of Kount Central Errors Declaration public int GetKountCentralErrorCount() Returns Type Description System.Int32 Number of Kount Central Errors GetKountCentralErrors() Get all the Kount Central Errors for this response Declaration public List<string> GetKountCentralErrors() Returns Type Description List < System.String > Kount Central Errors GetKountCentralNumberThresholdsTriggered() Get the number of Kount Central thresholds triggered Declaration public int GetKountCentralNumberThresholdsTriggered() Returns Type Description System.Int32 Number of Kount Central thresholds triggered GetKountCentralThresholdEvents() Get list of KcEvent objects for this Response Declaration public List<KcEvent> GetKountCentralThresholdEvents() Returns Type Description List < KcEvent > List of KcEvent objects GetKountCentralWarningCount() Get the number of Kount Central Warnings Declaration public int GetKountCentralWarningCount() Returns Type Description System.Int32 Number of Kount Central Warnings GetKountCentralWarnings() Get all the Kount Central Warnings for this response Declaration public List<string> GetKountCentralWarnings() Returns Type Description List < System.String > Kount Central Warnings GetLanguage() Get the language setting on the remote device Declaration public string GetLanguage() Returns Type Description System.String The language GetLexisNexisCbdAttributes() Get LexisNexis Chargeback Defender attribute data associated with the RIS transaction. Please contact your Kount representative to enable support for this feature in your merchant account. Declaration public IDictionary GetLexisNexisCbdAttributes() Returns Type Description IDictionary Map of attributes where the keys are the attribute names and the values are the attribute values. GetLexisNexisInstantIdAttributes() Get LexisNexis Instant ID attribute data associated with the RIS transaction. Please contact your Kount representative to enable support for this feature in your merchant account. Declaration public IDictionary GetLexisNexisInstantIdAttributes() Returns Type Description IDictionary Map of attributes where the keys are the attribute names and the values are the attribute values. GetLocalTime() Get local time of the remote device in the YYYY-MM-DD format Declaration public string GetLocalTime() Returns Type Description System.String Local time GetMasterCardFraudScore() Get MasterCard Fraud Score associated with the RIS transaction. Please contact your Kount representative to enable support for this feature in your merchant account. Declaration public string GetMasterCardFraudScore() Returns Type Description System.String MasterCard Fraud Score GetMerchantId() Get the merchant Id of the merchant making the request. Declaration public string GetMerchantId() Returns Type Description System.String Merchant Id. GetMobileDevice() Get a string representing whether the remote device is a mobile device Declaration public string GetMobileDevice() Returns Type Description System.String \"Y\" or \"N\" GetMobileForwarder() Get the mobile device's wireless application protocol Declaration public string GetMobileForwarder() Returns Type Description System.String The protocol GetMobileType() Get the mobile device type Declaration public string GetMobileType() Returns Type Description System.String Mobile type GetMode() Get the mode of the RIS request. Declaration public string GetMode() Returns Type Description System.String Character of the original RIS request mode: e.g. U. GetNetwork() Get the network type Declaration public string GetNetwork() Returns Type Description System.String Get the network type of the client, e.g. L for library GetNumberCountersTriggered() Get the number of rules counters triggered in the response. Declaration public int GetNumberCountersTriggered() Returns Type Description System.Int32 Number of counters triggered GetNumberRulesTriggered() Get the number of rules triggered with the response. Declaration public int GetNumberRulesTriggered() Returns Type Description System.Int32 Number of rules GetOrderNumber() Get the Order Number. Declaration public string GetOrderNumber() Returns Type Description System.String Order number generated by the merchant. GetOS() Get operating system (derived from user agent string) Declaration public string GetOS() Returns Type Description System.String OS (operating system) GetPcRemote() Get a string representing whether the end device is a remotely controlled computer Declaration public string GetPcRemote() Returns Type Description System.String \"Y\" or \"N\" GetPiercedIPAddress() Get pierced IP address Declaration public string GetPiercedIPAddress() Returns Type Description System.String Pierced IP address GetPiercedIPAddressCity() Get city of pierced IP address Declaration public string GetPiercedIPAddressCity() Returns Type Description System.String City of pierced IP address GetPiercedIPAddressCountry() Get country of pierced IP address Declaration public string GetPiercedIPAddressCountry() Returns Type Description System.String Country of pierced IP address GetPiercedIPAddressLatitude() Get latitude of pierced IP address Declaration public string GetPiercedIPAddressLatitude() Returns Type Description System.String Latitude of pierced IP address GetPiercedIPAddressLongitude() Get longitude of pierced IP address Declaration public string GetPiercedIPAddressLongitude() Returns Type Description System.String Longitude of pierced IP address GetPiercedIPAddressOrganization() Get organization of pierced IP address Declaration public string GetPiercedIPAddressOrganization() Returns Type Description System.String Organization of pierced IP address GetPiercedIPAddressRegion() Get region of pierced IP address Declaration public string GetPiercedIPAddressRegion() Returns Type Description System.String Region of pierced IP address GetPrefixedResponseDataDictionary(String) Get a dictionary of the response data where the keys are the RIS response keys that begin with a specified prefix. Declaration protected IDictionary GetPrefixedResponseDataDictionary(string prefix) Parameters Type Name Description System.String prefix Key prefix. Returns Type Description IDictionary Dictionary of key-value pairs for a specified RIS key prefix. GetProxy() Get a string representing whether the remote device is using a proxy Declaration public string GetProxy() Returns Type Description System.String Returns Y or N GetReason() Get the reason for the RIS response. Declaration public string GetReason() Returns Type Description System.String Main response reason, e.g. LIST, SCOR, etc. GetReasonCode() Get the merchant defined reason code for the RIS response. Declaration public string GetReasonCode() Returns Type Description System.String Reason code GetRegion() Get the customer region Declaration public string GetRegion() Returns Type Description System.String US state abbreviation or country code. GetRulesTriggered() Get a Map of the rules triggered by this Response. Declaration public IDictionary GetRulesTriggered() Returns Type Description IDictionary Map of the rules GetScore() Get the Kount score. Declaration public string GetScore() Returns Type Description System.String 1 to 99. The highter the score, the more risk. GetSessionId() Get the session Id. Declaration public string GetSessionId() Returns Type Description System.String Session Id of this transaction generated by the merchant. GetSite() Get the site ID Declaration public string GetSite() Returns Type Description System.String The site ID GetTimeZone() Get the two character country code setting in the remote device's browser Declaration public string GetTimeZone() Returns Type Description System.String The time zone GetTransactionId() Get Kount transaction Id. Declaration public string GetTransactionId() Returns Type Description System.String Alphanumeric transaction id generated by Kount. GetUserAgentString() Get user agent string Declaration public string GetUserAgentString() Returns Type Description System.String User agent string GetVelo() 6 hour card velocity Declaration public string GetVelo() Returns Type Description System.String Number of times this card number was used in the last 6 hours GetVersion() Get the version of the RIS response. Declaration public string GetVersion() Returns Type Description System.String String of the version. GetVmax() 2 week card velocity Declaration public string GetVmax() Returns Type Description System.String Number of times this card number was used in the last two weeks GetVoiceDevice() Get a string representing whether or not the remote device is voice controlled Declaration public string GetVoiceDevice() Returns Type Description System.String \"Y\" or \"N\" GetWarningCount() Get the number of warnings associated with the response. Declaration public int GetWarningCount() Returns Type Description System.Int32 Number of warnings GetWarnings() Get a Map of the warnings returned by this Response. Declaration public List<string> GetWarnings() Returns Type Description List < System.String > Get the warnings HasErrors() Check if the response has errors. Declaration public bool HasErrors() Returns Type Description System.Boolean True if response has errors, false otherwise. ToString() Get the original raw name=value pair string of the response. Declaration public override string ToString() Returns Type Description System.String Raw string of the response."
  },
  "api/Kount.Ris.Inquiry.html": {
    "href": "api/Kount.Ris.Inquiry.html",
    "title": "Class Inquiry | Kount SDK .NET",
    "keywords": "Class Inquiry Inquiry class. A bunch of setters for sending initial transaction data to a Kount RIS server. Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2010 Keynetics Inc Inheritance System.Object Request Inquiry Inherited Members Request.Data Request.GetResponse(Boolean) Request.SetParameter(String, String) Request.SetMerchantId(Int32) Request.SetKountCentralCustomerId(String) Request.SetSessionId(String) Request.SetOrderNumber(String) Request.SetMack(Char) Request.SetAuth(Char) Request.SetAvsz(Char) Request.SetAvst(Char) Request.SetCvvr(Char) Request.SetPaypalPayment(String) Request.SetGooglePayment(String) Request.SetCardPayment(String) Request.SetCardPaymentMasked(String) Request.SetCheckPayment(String) Request.SetBillMeLaterPayment(String) Request.SetNoPayment() Request.SetGiftCardPayment(String) Request.SetPayment(String, String) Request.SetGreenDotMoneyPakPayment(String) Request.GetParam(String) Request.GetUrl() Request.SetUrl(String) Request.SetCertificate(String, String) Request.SetApiKey(String) Request.GetCertificateFile() Request.GetPrivateKeyPassword() Request.SetKhashPaymentEncoding() Request.SetKhashPaymentEncoding(Boolean) Request.SetPaymentTokenLast4(String) Request.SetVersion(String) Request.IsSetKhashPaymentEncoding() Request.SetPaymentToken(String) Request.CheckConfigurationParameter(String) Request.SafeGet(String) Namespace :Kount.Ris Assembly :KountRisSdk.dll Syntax public class Inquiry : Request Constructors Inquiry() Constructor. Sets the mode to 'Q', the currency to 'USD' and sets the SDK identifier value. Use SetMode(char) and SetCurrency(string) to change the RIS mode and currency respectively. Declaration public Inquiry() Fields ModeJ Kount Central threshold-only inquiry Declaration public const char ModeJ = null Field Value Type Description System.Char ModeP Phone order mode Declaration public const char ModeP = null Field Value Type Description System.Char ModeQ Inquiry mode Declaration public const char ModeQ = null Field Value Type Description System.Char ModeW Kount Central normal inquiry with thresholds Declaration public const char ModeW = null Field Value Type Description System.Char Methods SetAnid(String) Set the Anid of the client. Declaration public void SetAnid(string anid) Parameters Type Name Description System.String anid Anid of the client. SetBillingAddress(String, String, String, String, String, String) Set the billing address. Declaration public void SetBillingAddress(string address1, string address2, string city, string state, string postalCode, string country) Parameters Type Name Description System.String address1 Address line 1. System.String address2 Address line 2. System.String city Set the city. System.String state Set the state. System.String postalCode Set the postal code. System.String country The the country. SetBillingAddress(String, String, String, String, String, String, String, String) Set the billing address. Declaration public void SetBillingAddress(string address1, string address2, string city, string state, string postalCode, string country, string premise, string street) Parameters Type Name Description System.String address1 Address line 1. System.String address2 Address line 2. System.String city Set the city. System.String state Set the state. System.String postalCode Set the postal code. System.String country Set the country. System.String premise Set the premise. System.String street Set the street. SetBillingPhoneNumber(String) Set the billing phone number. Declaration public void SetBillingPhoneNumber(string phoneNumber) Parameters Type Name Description System.String phoneNumber Phone number. SetCart(System.Collections.ArrayList) Set a shoppinng cart Declaration public void SetCart(System.Collections.ArrayList cart) Parameters Type Name Description System.Collections.ArrayList cart ArrayList of Kount.Ris.CartItem objects SetCash(Int32) Set the cash value of any fencible goods. Declaration public void SetCash(int cash) Parameters Type Name Description System.Int32 cash Cash value in pennies. SetCurrency(String) Set the three character ISO-4217 currency code. Declaration public void SetCurrency(string currency) Parameters Type Name Description System.String currency Three character code e.g. USD. SetDateOfBirth(String) Set the date of birth in the format YYYY-MM-DD Declaration public void SetDateOfBirth(string dob) Parameters Type Name Description System.String dob Date of birth SetEmail(String) Set the email address of the client. Declaration public void SetEmail(string email) Parameters Type Name Description System.String email Email address. SetEpoch(Int64) Set the timestamp (in seconds) since the UNIX epoch for when the UNIQ value was set. Declaration public void SetEpoch(long timeStamp) Parameters Type Name Description System.Int64 timeStamp Set the timestamp SetExpirationMonth(String) Optional expiration month on the credit card Declaration public void SetExpirationMonth(string month) Parameters Type Name Description System.String month String MM signifying the month SetExpirationYear(String) Optional expiration year on the credit card Declaration public void SetExpirationYear(string year) Parameters Type Name Description System.String year String YYYY signifying the year SetGender(Char) Set the gender Declaration public void SetGender(char gender) Parameters Type Name Description System.Char gender M(ale) or F(emale) SetIpAddress(String) Set the IP address of the client. Declaration public void SetIpAddress(string address) Parameters Type Name Description System.String address IP address of the client. SetMode(Char) Set the mode of the inquiry. Declaration public override void SetMode(char mode) Parameters Type Name Description System.Char mode Set mode Q or P Overrides Request.SetMode(Char) SetName(String) Set the name of the client. Declaration public void SetName(string name) Parameters Type Name Description System.String name Client name. SetShippingAddress(String, String, String, String, String, String) Set the shipping address. Declaration public void SetShippingAddress(string address1, string address2, string city, string state, string postalCode, string country) Parameters Type Name Description System.String address1 Address line 1. System.String address2 Address line 2. System.String city Set the city. System.String state Set the state. System.String postalCode Set the postal code. System.String country Set the country. SetShippingAddress(String, String, String, String, String, String, String, String) Set the shipping address. Declaration public void SetShippingAddress(string address1, string address2, string city, string state, string postalCode, string country, string premise, string street) Parameters Type Name Description System.String address1 Address line 1. System.String address2 Address line 2. System.String city Set the city. System.String state Set the state. System.String postalCode Set the postal code. System.String country Set the country. System.String premise Set the premise. System.String street Set the street. SetShippingEmail(String) Set the shipping email. Declaration public void SetShippingEmail(string shipEmail) Parameters Type Name Description System.String shipEmail Shipping Email. SetShippingName(String) Set the shipping name. Declaration public void SetShippingName(string shipName) Parameters Type Name Description System.String shipName Shipping Name. SetShippingPhoneNumber(String) Set the shipping phone number. Declaration public void SetShippingPhoneNumber(string phoneNumber) Parameters Type Name Description System.String phoneNumber Phone number. SetShipType(String) Set the shipping type. Declaration public void SetShipType(string shipType) Parameters Type Name Description System.String shipType Ship type: e.g. ST, ND, etc. SetTotal(Int32) Set the total amount of the transaction. Declaration public void SetTotal(int total) Parameters Type Name Description System.Int32 total Total transaction amount in pennies. SetUnique(String) Set the uniqe (cookie identifier, etc.) of the client. Declaration public void SetUnique(string unique) Parameters Type Name Description System.String unique Unique client identifier SetUserAgent(String) Set the user agent of the client. Declaration public void SetUserAgent(string userAgent) Parameters Type Name Description System.String userAgent User agent string of the client. SetUserDefinedField(String, String) Set the value of a named user defined field Declaration public void SetUserDefinedField(string label, string value) Parameters Type Name Description System.String label Label of the user defined field System.String value Value of the user defined field SetWebsite(String) Website id associated with the transaction Declaration public void SetWebsite(string site) Parameters Type Name Description System.String site String 1 - 8 characters long"
  },
  "api/Kount.Log.Binding.SimpleLogger.html": {
    "href": "api/Kount.Log.Binding.SimpleLogger.html",
    "title": "Class SimpleLogger | Kount SDK .NET",
    "keywords": "Class SimpleLogger Facade class to a simple file logger. Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2010 Keynetics Inc Inheritance System.Object SimpleLogger Namespace :Kount.Log.Binding Assembly :KountRisSdk.dll Syntax public class SimpleLogger : object, ILogger Constructors SimpleLogger(String) The Constructor. Declaration public SimpleLogger(string name) Parameters Type Name Description System.String name Name of the logger Methods Debug(String) Log a debug level message. Declaration public void Debug(string message) Parameters Type Name Description System.String message Message to log Implements ILogger.Debug(String) Debug(String, Exception) Log a debug level message and exception. Declaration public void Debug(string message, Exception e) Parameters Type Name Description System.String message Message to log Exception e Exception to log Implements ILogger.Debug(String, Exception) Error(String) Log an error level message. Declaration public void Error(string message) Parameters Type Name Description System.String message Message to log Implements ILogger.Error(String) Error(String, Exception) Log an error level message and exception. Declaration public void Error(string message, Exception e) Parameters Type Name Description System.String message Message to log Exception e Exception to log Implements ILogger.Error(String, Exception) Fatal(String) Log a fatal level message. Declaration public void Fatal(string message) Parameters Type Name Description System.String message Message to log Implements ILogger.Fatal(String) Fatal(String, Exception) Log a fatal level message and exception. Declaration public void Fatal(string message, Exception e) Parameters Type Name Description System.String message Message to log Exception e Exception to log Implements ILogger.Fatal(String, Exception) Info(String) Log an info level message. Declaration public void Info(string message) Parameters Type Name Description System.String message Message to log Implements ILogger.Info(String) Info(String, Exception) Log an info level message and exception. Declaration public void Info(string message, Exception e) Parameters Type Name Description System.String message Message to log Exception e Exception to log Implements ILogger.Info(String, Exception) Warn(String) Log a warn level message. Declaration public void Warn(string message) Parameters Type Name Description System.String message Message to log Implements ILogger.Warn(String) Warn(String, Exception) Log a warn level message and exception. Declaration public void Warn(string message, Exception e) Parameters Type Name Description System.String message Message to log Exception e Exception to log Implements ILogger.Warn(String, Exception)"
  },
  "api/Kount.Log.Factory.SimpleLoggerFactory.html": {
    "href": "api/Kount.Log.Factory.SimpleLoggerFactory.html",
    "title": "Class SimpleLoggerFactory | Kount SDK .NET",
    "keywords": "Class SimpleLoggerFactory A simple logger binding class. Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2010 Keynetics Inc Inheritance System.Object SimpleLoggerFactory Namespace :Kount.Log.Factory Assembly :KountRisSdk.dll Syntax public class SimpleLoggerFactory : object, ILoggerFactory Methods GetLogger(String) Get a simple logger binding. Declaration public ILogger GetLogger(string name) Parameters Type Name Description System.String name Name of the logger Returns Type Description ILogger A Kount.Log.Binding.SimpleLogger Implements ILoggerFactory.GetLogger(String)"
  },
  "api/Kount.Ris.RequestException.html": {
    "href": "api/Kount.Ris.RequestException.html",
    "title": "Class RequestException | Kount SDK .NET",
    "keywords": "Class RequestException Request Exception. Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2010 Keynetics Inc Inheritance System.Object RequestException Namespace :Kount.Ris Assembly :KountRisSdk.dll Syntax public class RequestException : Exception Constructors RequestException(String) Create an exception with an error message Declaration public RequestException(string errorMessage) Parameters Type Name Description System.String errorMessage Error message. RequestException(String, Exception) Create an exception with a message and another exception Declaration public RequestException(string errorMessage, Exception innerEx) Parameters Type Name Description System.String errorMessage Error message. Exception innerEx Inner exception. Properties ErrorMessage Gets the string of the error message. Declaration public string ErrorMessage { get; } Property Value Type Description System.String"
  },
  "api/Kount.SimpleLogger.File.html": {
    "href": "api/Kount.SimpleLogger.File.html",
    "title": "Class File | Kount SDK .NET",
    "keywords": "Class File A simple file logger. Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2010 Keynetics Inc Inheritance System.Object File Namespace :Kount.SimpleLogger Assembly :KountRisSdk.dll Syntax public class File : object Constructors File(String) Constructor for file logger. Declaration public File(string name) Parameters Type Name Description System.String name Name of the logger Methods Debug(String) Log a debug level message. Declaration public void Debug(string message) Parameters Type Name Description System.String message Message to log Debug(String, Exception) Log a debug level message and exception. Declaration public void Debug(string message, Exception e) Parameters Type Name Description System.String message Mesage to log Exception e Exception to log Error(String) Log an error level message. Declaration public void Error(string message) Parameters Type Name Description System.String message Message to log Error(String, Exception) Log an error level message and exception. Declaration public void Error(string message, Exception e) Parameters Type Name Description System.String message Mesage to log Exception e Exception to log Fatal(String) Log a fatal level message. Declaration public void Fatal(string message) Parameters Type Name Description System.String message Message to log Fatal(String, Exception) Log a fatal level message and exception. Declaration public void Fatal(string message, Exception e) Parameters Type Name Description System.String message Mesage to log Exception e Exception to log FormatMessage(String, String, Exception) Format a message so it can be logged Declaration protected string FormatMessage(string message, string level, Exception e) Parameters Type Name Description System.String message Message to log System.String level Logging level Exception e Exception to log Returns Type Description System.String Formatted message Info(String) Log an info level message. Declaration public void Info(string message) Parameters Type Name Description System.String message Message to log Info(String, Exception) Log an info level message and exception. Declaration public void Info(string message, Exception e) Parameters Type Name Description System.String message Mesage to log Exception e Exception to log IsLoggable(String) Determine if a message should be logged based on the logging level defined in the app configuration. Declaration protected bool IsLoggable(string level) Parameters Type Name Description System.String level Logging level of the message Returns Type Description System.Boolean True if the message should be logged, false otherwise Log(String) Log a message. Declaration protected void Log(string message) Parameters Type Name Description System.String message Message to log ProcessMessage(String, String, Exception) Process a log message, by determining if it should be logged, formatting the message, and logging it. Declaration protected void ProcessMessage(string message, string level, Exception e) Parameters Type Name Description System.String message Message to log System.String level Logging level Exception e Exception to log Warn(String) Log a warn level message. Declaration public void Warn(string message) Parameters Type Name Description System.String message Message to log Warn(String, Exception) Log a warn level message and exception. Declaration public void Warn(string message, Exception e) Parameters Type Name Description System.String message Mesage to log Exception e Exception to log"
  },
  "api/Kount.Log.Binding.NopLogger.html": {
    "href": "api/Kount.Log.Binding.NopLogger.html",
    "title": "Class NopLogger | Kount SDK .NET",
    "keywords": "Class NopLogger A logger that silently discards all logging. Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2010 Keynetics Inc Inheritance System.Object NopLogger Namespace :Kount.Log.Binding Assembly :KountRisSdk.dll Syntax public class NopLogger : object, ILogger Constructors NopLogger(String) Constructor for NOP logger. Declaration public NopLogger(string name) Parameters Type Name Description System.String name Name of the logger Methods Debug(String) Discard a debug level message. Declaration public void Debug(string message) Parameters Type Name Description System.String message Message to log Implements ILogger.Debug(String) Debug(String, Exception) Discard a debug level message and an exception. Declaration public void Debug(string message, Exception e) Parameters Type Name Description System.String message Message to log Exception e Exception to log Implements ILogger.Debug(String, Exception) Error(String) Discard an error level message. Declaration public void Error(string message) Parameters Type Name Description System.String message Message to log Implements ILogger.Error(String) Error(String, Exception) Discard an error level message and an exception. Declaration public void Error(string message, Exception e) Parameters Type Name Description System.String message Message to log Exception e Exception to log Implements ILogger.Error(String, Exception) Fatal(String) Discard a fatal level message. Declaration public void Fatal(string message) Parameters Type Name Description System.String message Message to log Implements ILogger.Fatal(String) Fatal(String, Exception) Discard a fatal level message and an exception. Declaration public void Fatal(string message, Exception e) Parameters Type Name Description System.String message Message to log Exception e Exception to log Implements ILogger.Fatal(String, Exception) Info(String) Discard an info level message. Declaration public void Info(string message) Parameters Type Name Description System.String message Message to log Implements ILogger.Info(String) Info(String, Exception) Discard an info level message and an exception. Declaration public void Info(string message, Exception e) Parameters Type Name Description System.String message Message to log Exception e Exception to log Implements ILogger.Info(String, Exception) Warn(String) Discard a warn level message. Declaration public void Warn(string message) Parameters Type Name Description System.String message Message to log Implements ILogger.Warn(String) Warn(String, Exception) Discard a warn level message and an exception. Declaration public void Warn(string message, Exception e) Parameters Type Name Description System.String message Message to log Exception e Exception to log Implements ILogger.Warn(String, Exception)"
  },
  "api/Kount.Ris.CartItem.html": {
    "href": "api/Kount.Ris.CartItem.html",
    "title": "Class CartItem | Kount SDK .NET",
    "keywords": "Class CartItem Shopping cart item data object. Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2010 Keynetics Inc Inheritance System.Object CartItem Namespace :Kount.Ris Assembly :KountRisSdk.dll Syntax public class CartItem : object Constructors CartItem(String, String, String, Int64, Int64) Cart item constructor Declaration public CartItem(string productType, string productItem, string productDescription, long productQuantity, long productPrice) Parameters Type Name Description System.String productType Product type as a 1 -255 char string System.String productItem Product item as a 1 - 255 char string System.String productDescription Product description as a 0 - 255 char string System.Int64 productQuantity Product quantity System.Int64 productPrice Product price Properties ProductDescription Gets or sets the product description Declaration public string ProductDescription { get; set; } Property Value Type Description System.String ProductItem Gets or sets the product item Declaration public string ProductItem { get; set; } Property Value Type Description System.String ProductPrice Gets or sets the product price Declaration public long ProductPrice { get; set; } Property Value Type Description System.Int64 ProductQuantity Gets or sets the product quantity Declaration public long ProductQuantity { get; set; } Property Value Type Description System.Int64 ProductType Gets or sets product type Declaration public string ProductType { get; set; } Property Value Type Description System.String"
  },
  "api/Kount.Ris.Request.html": {
    "href": "api/Kount.Ris.Request.html",
    "title": "Class Request | Kount SDK .NET",
    "keywords": "Class Request Abstract parent class for request objects. Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2010 Keynetics Inc Inheritance System.Object Request Inquiry Update Namespace :Kount.Ris Assembly :KountRisSdk.dll Syntax public abstract class Request : object Constructors Request() Construct a request object. Set the static setting from the web.config file. Declaration protected Request() Exceptions Type Condition RequestException Thrown when there is static data missing for a RIS request. Properties Data Gets hashtable data Declaration protected Hashtable Data { get; } Property Value Type Description Hashtable Methods CheckConfigurationParameter(String) Check configuration parameters for existence in application configuration. Declaration protected void CheckConfigurationParameter(string parameter) Parameters Type Name Description System.String parameter Parameter name Exceptions Type Condition RequestException Thrown when parameter is missing GetCertificateFile() Get the certificate file path. Declaration public string GetCertificateFile() Returns Type Description System.String String of the certificate file path. GetParam(String) Get value from Data - Hashtable. Declaration public string GetParam(string param) Parameters Type Name Description System.String param Key string in hashtable Returns Type Description System.String GetPrivateKeyPassword() Private key password used to export the certificate file. Declaration public string GetPrivateKeyPassword() Returns Type Description System.String String of the certificate export password. GetResponse(Boolean) Get the response from the RIS server. Declaration public Response GetResponse(bool validate = true) Parameters Type Name Description System.Boolean validate default value is TRUE. If FALSE validate silently doesn't throw exception. Returns Type Description Response Kount.Ris.Response populated object. GetUrl() Get the URL of the target RIS server. Declaration public string GetUrl() Returns Type Description System.String String of the target url. IsSetKhashPaymentEncoding() Check if KHASH payment encoding has been set. Declaration protected bool IsSetKhashPaymentEncoding() Returns Type Description System.Boolean TRUE when set SafeGet(String) Sanitize a variable before return it. Declaration protected string SafeGet(string var) Parameters Type Name Description System.String var Raw variable Returns Type Description System.String Sanitized variable SetApiKey(String) Set the API key. Declaration public void SetApiKey(string key) Parameters Type Name Description System.String key Key used to authenticate. SetAuth(Char) Set the auth status of the payment. Declaration public void SetAuth(char auth) Parameters Type Name Description System.Char auth Set A or D. SetAvst(Char) Bankcard AVS STREET ADDRESS reply. Declaration public void SetAvst(char avst) Parameters Type Name Description System.Char avst M, N, or X. SetAvsz(Char) Bankcard AVS ZIP CODE reply. Declaration public void SetAvsz(char avsz) Parameters Type Name Description System.Char avsz M, N, or X. SetBillMeLaterPayment(String) Set a Bill Me Later payment. Declaration public void SetBillMeLaterPayment(string blmlId) Parameters Type Name Description System.String blmlId bill me later id SetCardPayment(String) Set a credit card payment Declaration public void SetCardPayment(string cardNumber) Parameters Type Name Description System.String cardNumber Raw credit card number SetCardPaymentMasked(String) Sets a card payment and masks the card number in the following way: First 6 characters remain as they are, following characters up to the last 4 are replaced with the 'X' character, last 4 characters remain as they are. If the provided Payment parameter is not a card payment, standard encoding will be applied. Declaration public void SetCardPaymentMasked(string cardNumber) Parameters Type Name Description System.String cardNumber Raw credit card number Examples card number 0007380568572514 is masked to 000738XXXXXX2514 SetCertificate(String, String) Set the RIS certificate information. Declaration public void SetCertificate(string certificate, string password) Parameters Type Name Description System.String certificate Full path of the certificate pk12 or pfx file. System.String password Password used to export the certificate. SetCheckPayment(String) Set a check payment. Declaration public void SetCheckPayment(string micr) Parameters Type Name Description System.String micr Micro number on the check. SetCvvr(Char) Bankcard CVV/CVC/CVV2 reply. Declaration public void SetCvvr(char cvvr) Parameters Type Name Description System.Char cvvr M, N, or X. SetGiftCardPayment(String) Set a gift card payment Declaration public void SetGiftCardPayment(string giftCardNum) Parameters Type Name Description System.String giftCardNum Gift card number SetGooglePayment(String) Set a google payment Declaration public void SetGooglePayment(string googleId) Parameters Type Name Description System.String googleId Google pay id SetGreenDotMoneyPakPayment(String) Set a Green Dot MoneyPak payment. Declaration public void SetGreenDotMoneyPakPayment(string id) Parameters Type Name Description System.String id Green Dot MoneyPak payment ID number SetKhashPaymentEncoding() Set the RIS payment encoding to KHASH. Declaration public void SetKhashPaymentEncoding() SetKhashPaymentEncoding(Boolean) Set the RIS payment encoding to KHASH. Declaration public void SetKhashPaymentEncoding(bool enabled) Parameters Type Name Description System.Boolean enabled TRUE when enabled SetKountCentralCustomerId(String) Set the Kount Central customer Id. Declaration public void SetKountCentralCustomerId(string customerId) Parameters Type Name Description System.String customerId Kount Central customer Id. SetMack(Char) Set the merchant acknowledgement that this product will ship. Declaration public void SetMack(char mack) Parameters Type Name Description System.Char mack Set Y or N. SetMerchantId(Int32) Set the merchant Id. Declaration public void SetMerchantId(int merchantId) Parameters Type Name Description System.Int32 merchantId Merchant Id. SetMode(Char) Set the mode of the transaction. Declaration public abstract void SetMode(char mode) Parameters Type Name Description System.Char mode Depends on the request type. SetNoPayment() Set No Payment. Declaration public void SetNoPayment() SetOrderNumber(String) Set the merchant order number. Declaration public void SetOrderNumber(string orderNumber) Parameters Type Name Description System.String orderNumber Unique, up to 32 characters. SetParameter(String, String) Set parameters in the Response Declaration public void SetParameter(string key, string value) Parameters Type Name Description System.String key Parameter key System.String value Parameter value SetPayment(String, String) Set a payment type and payment token Declaration public void SetPayment(string ptyp, string ptok) Parameters Type Name Description System.String ptyp Payment Type System.String ptok Payment Token SetPaymentToken(String) Set the payment token. Declaration protected void SetPaymentToken(string token) Parameters Type Name Description System.String token Payment token SetPaymentTokenLast4(String) Set the last 4 characters of the payment token. Declaration public void SetPaymentTokenLast4(string last4) Parameters Type Name Description System.String last4 Last 4 characters SetPaypalPayment(String) Set a Paypal payment. Declaration public void SetPaypalPayment(string paypalId) Parameters Type Name Description System.String paypalId Paypal payer ID SetSessionId(String) Set the session ID of this session. Declaration public void SetSessionId(string sessionId) Parameters Type Name Description System.String sessionId Session Id from the merchant. SetUrl(String) Set the URL of the target RIS server. Declaration public void SetUrl(string url) Parameters Type Name Description System.String url String of the target RIS server. SetVersion(String) Set the version of the RIS response. Declaration public void SetVersion(string version) Parameters Type Name Description System.String version Response version."
  },
  "api/Kount.Log.Factory.NopLoggerFactory.html": {
    "href": "api/Kount.Log.Factory.NopLoggerFactory.html",
    "title": "Class NopLoggerFactory | Kount SDK .NET",
    "keywords": "Class NopLoggerFactory A NOP logger binding class. Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2010 Keynetics Inc Inheritance System.Object NopLoggerFactory Namespace :Kount.Log.Factory Assembly :KountRisSdk.dll Syntax public class NopLoggerFactory : object, ILoggerFactory Methods GetLogger(String) Get a NOP logger binding. Declaration public ILogger GetLogger(string name) Parameters Type Name Description System.String name Name of the logger Returns Type Description ILogger A Kount.Log.Binding.NopLogger Implements ILoggerFactory.GetLogger(String)"
  },
  "api/Kount.Ris.KcEvent.html": {
    "href": "api/Kount.Ris.KcEvent.html",
    "title": "Class KcEvent | Kount SDK .NET",
    "keywords": "Class KcEvent Kount Central Event class description Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2014 Keynetics Inc Inheritance System.Object KcEvent Namespace :Kount.Ris Assembly :KountRisSdk.dll Syntax public class KcEvent : object Constructors KcEvent(String, String, String) A helper class to oraganize Kount Central threshold event data in the RIS response. Declaration public KcEvent(string code, string expression, string decision) Parameters Type Name Description System.String code The threshold event's code System.String expression The threshold event's expression System.String decision The threshold event's decision Properties Code Gets the threshold event code Declaration public string Code { get; } Property Value Type Description System.String Decision Gets the threshold event decision Declaration public string Decision { get; } Property Value Type Description System.String Expression Gets the threshold event expression Declaration public string Expression { get; } Property Value Type Description System.String Methods ToString() Our ToString method Declaration public override string ToString() Returns Type Description System.String This object string representation"
  },
  "api/Kount.Ris.Update.html": {
    "href": "api/Kount.Ris.Update.html",
    "title": "Class Update | Kount SDK .NET",
    "keywords": "Class Update Update class. A bunch of setters for sending transaction update data to a Kount RIS server. Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2010 Keynetics Inc Inheritance System.Object Request Update Inherited Members Request.Data Request.GetResponse(Boolean) Request.SetParameter(String, String) Request.SetMerchantId(Int32) Request.SetKountCentralCustomerId(String) Request.SetSessionId(String) Request.SetOrderNumber(String) Request.SetMack(Char) Request.SetAuth(Char) Request.SetAvsz(Char) Request.SetAvst(Char) Request.SetCvvr(Char) Request.SetPaypalPayment(String) Request.SetGooglePayment(String) Request.SetCardPayment(String) Request.SetCardPaymentMasked(String) Request.SetCheckPayment(String) Request.SetBillMeLaterPayment(String) Request.SetNoPayment() Request.SetGiftCardPayment(String) Request.SetPayment(String, String) Request.SetGreenDotMoneyPakPayment(String) Request.GetParam(String) Request.GetUrl() Request.SetUrl(String) Request.SetCertificate(String, String) Request.SetApiKey(String) Request.GetCertificateFile() Request.GetPrivateKeyPassword() Request.SetKhashPaymentEncoding() Request.SetKhashPaymentEncoding(Boolean) Request.SetPaymentTokenLast4(String) Request.SetVersion(String) Request.IsSetKhashPaymentEncoding() Request.SetPaymentToken(String) Request.CheckConfigurationParameter(String) Request.SafeGet(String) Namespace :Kount.Ris Assembly :KountRisSdk.dll Syntax public class Update : Request Constructors Update() Constructor. Sets the mode to 'U' by default. Use setMode(char) to change it. Declaration public Update() Methods SetMode(Char) Set the mode of the update. Declaration public override void SetMode(char mode) Parameters Type Name Description System.Char mode Set U or X Overrides Request.SetMode(Char) Exceptions Type Condition IllegalArgumentException Thrown if parameter is an invalid mode. SetPayPalId(String) Set the paypal Id Declaration public void SetPayPalId(string paypalId) Parameters Type Name Description System.String paypalId Set paypal Id SetRefundChargeback(Char) Set if this transaction ended up being a refund or chargback. Declaration public void SetRefundChargeback(char rfcb) Parameters Type Name Description System.Char rfcb Set R or C. SetTransactionId(String) Set the original associated transaction id generated by Kount Declaration public void SetTransactionId(string transactionId) Parameters Type Name Description System.String transactionId Transaction id."
  },
  "api/Kount.Log.ExampleClient.html": {
    "href": "api/Kount.Log.ExampleClient.html",
    "title": "Class ExampleClient | Kount SDK .NET",
    "keywords": "Class ExampleClient A class demonstrating how to use logging Inheritance System.Object ExampleClient Namespace :Kount.Log Assembly :KountRisSdk.dll Syntax public class ExampleClient : object Methods Main() The main entry point for the application. Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2010 Keynetics Inc Declaration public static void Main()"
  },
  "api/Kount.Ris.IllegalArgumentException.html": {
    "href": "api/Kount.Ris.IllegalArgumentException.html",
    "title": "Class IllegalArgumentException | Kount SDK .NET",
    "keywords": "Class IllegalArgumentException Kount Ris Illegal argument exception. Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2010 Keynetics Inc Inheritance System.Object IllegalArgumentException Namespace :Kount.Ris Assembly :KountRisSdk.dll Syntax public class IllegalArgumentException : Exception Constructors IllegalArgumentException(String) Create the exception with an error message Declaration public IllegalArgumentException(string errorMessage) Parameters Type Name Description System.String errorMessage Error message. IllegalArgumentException(String, Exception) Create the exception with an error message and another exception. Declaration public IllegalArgumentException(string errorMessage, Exception innerEx) Parameters Type Name Description System.String errorMessage Error message. Exception innerEx Inner exception. Properties ErrorMessage Gets the error message. Declaration public string ErrorMessage { get; } Property Value Type Description System.String"
  },
  "api/Kount.Ris.RSA.html": {
    "href": "api/Kount.Ris.RSA.html",
    "title": "Class RSA | Kount SDK .NET",
    "keywords": "Class RSA RSA Utility class for encrypting PANs Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2010 Keynetics Inc Inheritance System.Object RSA Namespace :Kount.Ris Assembly :KountRisSdk.dll Syntax public class RSA : object Methods Encrypt(String) Encrypt a token with an RSA public key Declaration public string Encrypt(string plainText) Parameters Type Name Description System.String plainText Plaintext string Returns Type Description System.String Encrypted string"
  },
  "api/Kount.Ris.ValidationException.html": {
    "href": "api/Kount.Ris.ValidationException.html",
    "title": "Class ValidationException | Kount SDK .NET",
    "keywords": "Class ValidationException Validation Exception. Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2010 Keynetics Inc Inheritance System.Object ValidationException Namespace :Kount.Ris Assembly :KountRisSdk.dll Syntax public class ValidationException : Exception Constructors ValidationException(String) Create an exception with an error message Declaration public ValidationException(string errorMessage) Parameters Type Name Description System.String errorMessage Error message. ValidationException(String, Exception) Create an exception with an error message and another exception Declaration public ValidationException(string errorMessage, Exception innerEx) Parameters Type Name Description System.String errorMessage Error message. Exception innerEx Inner exception. Properties ErrorMessage Gets a string of the error message. Declaration public string ErrorMessage { get; } Property Value Type Description System.String"
  },
  "api/Kount.Util.Khash.html": {
    "href": "api/Kount.Util.Khash.html",
    "title": "Class Khash | Kount SDK .NET",
    "keywords": "Class Khash Class for creating Kount RIS KHASH encoding payment tokens. Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2011 Kount Inc. All Rights Reserved. Inheritance System.Object Khash Namespace :Kount.Util Assembly :KountRisSdk.dll Syntax public class Khash : object Methods Hash(String) Compute a Kount hash of a given plain text string. Preserves the first six characters of the input so that hasked tokens can be categorized by Bank Idenfication Number (BIN). Declaration public static string Hash(string plainText) Parameters Type Name Description System.String plainText String to be hashed Returns Type Description System.String String Hashed HashGiftCard(Int32, String) Hash a gift card payment token using the Kount hashing algorithm. Declaration public static string HashGiftCard(int merchantId, string cardNumber) Parameters Type Name Description System.Int32 merchantId Merchant ID number System.String cardNumber Card number to be hashed Returns Type Description System.String String Hashed HashPaymentToken(String) Create a Kount hash of a provided payment token. Payment tokens that can be hashed via this method include: credit card numbers, Paypal payment IDs, Check numbers, Google Checkout IDs, Bill Me Later IDs, and Green Dot MoneyPak IDs. Declaration public static string HashPaymentToken(string token) Parameters Type Name Description System.String token String to be hashed Returns Type Description System.String String Hashed"
  },
  "index.html": {
    "href": "index.html",
    "title": "| Kount SDK .NET",
    "keywords": "We have the resources developers need to add enterprise-level fraud protection to your ecommerce site. Whether you sell goods and services, transfer money, create accounts or take online applications, Kount provides award-winning protection that helps merchants of all types Boost Sales and Beat Fraud."
  },
  "articles/code_examples.html": {
    "href": "articles/code_examples.html",
    "title": "C# EXAMPLE FOR RIS | Kount SDK .NET",
    "keywords": "C# EXAMPLE FOR RIS Here is a minimal C# example for making the RIS call using our current .NET SDK . Step-by-step guide Add the steps involved: Add the Kount.NET Library to your Project. Create a Kount.Ris.Inquiry Object and populate the setters. Add cart data. Ask for the responger( Inquiry.getResponse() ). Process the Kount.Ris.Response object returned. Kount.Ris.Inquiry inq = new Kount.Ris.Inquiry(); inq.SetTotal(5000); inq.SetPayment(\"CARD\", \"5789372819873789\"); inq.SetIpAddress(\"165.53.125.33\"); inq.SetMack('Y'); inq.SetEmail(\"joe@domain.com\"); inq.SetMode('Q'); inq.SetSessionId(\"vdt8796tbhbvhe786hret87645643\"); inq.SetWebsite(\"DEFAULT\"); ArrayList cart = new ArrayList(); cart.Add(new Kount.Ris.CartItem(\"Electronics\", \"TV\",\"Big TV\", 1, 24900)); inq.SetCart (cart); Kount.Ris.Response response = inq.GetResponse(); Console.WriteLine(\"RESPONSE: \" + response.ToString());"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": ".NET SDK | Kount SDK .NET",
    "keywords": ".NET SDK Overview While most of the code in the SDK is the same regardless of language, there are still language specific elements in the settings that you will need to know so that the RIS SDK will work for you. The following documents the .NET-specific settings required and provides example code."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Software Development Kits (SDKs) | Kount SDK .NET",
    "keywords": "Software Development Kits (SDKs) A Software Development Kit, also called a “devkit” or SDK, is a set of development tools that allows software engineers to create customized applications for a particular software package, software framework, hardware platform, or operating system. This allows developers to create applications specific to their business needs that will interact with the product or products developed by the SDK creators."
  },
  "articles/testing.html": {
    "href": "articles/testing.html",
    "title": "Testing | Kount SDK .NET",
    "keywords": "Testing Test Project Current SDK includes KountRisTest.proj - consists implementation of all integration tests. Test Helper Common definitions for all tests (Please refer to TestHelper class for details). Note When using the Kount SDK all credit card information, by default, uses the KHASH encryption method where the credit card information is irreversibly hashed prior to transmission from the merchant to Kount. Output : BIN + 14 alpha-numeric characters. Example: \"123456A12C34E56G7DFG\" In the Test project are implemented, both encodings the KHASH and the MASK . KHASH public static Inquiry CreateInquiry(string cardNumber, out string sid, out string orderNum) { // create inquiry with default settings Inquiry inquiry = DefaultInquiry(out sid, out orderNum); inquiry.SetCardPayment(cardNumber); return inquiry; } * **MASK** ```cs public static Inquiry CreateInquiryMasked(string cardNumber, out string sid, out string orderNum) { // create inquiry with default settings Inquiry inquiry = DefaultInquiry(out sid, out orderNum); // newly implemented method in SDK inquiry.SetCardPaymentMasked(cardNumber); return inquiry; } Note Diference is only by calling SetCardPayment and SetCardPaymentMasked . Basic Connectivity Tests Basic connectivity credentials These are the credentials used for the most basic \"does it work?\" connection test. This is intended to simulate a new merchant providing their own credentials and verifying they can hit the Kount endpoint and receive a valid response. Merchant Id : 999666 Authentication key: provided by Kount 1. Mode Q call with one cart item. One rule triggered, approval status of REVIEW is returned public void RisQOneItemRequiredFieldsOneRuleReview() { // create inquiry Inquiry inquiry = TestHelper.CreateInquiry(PTOK, out _sid, out _orderNum); // set CART with one item var cart = new ArrayList(); cart.Add(new CartItem(\"SPORTING_GOODS\", \"SG999999\", \"3000 CANDLEPOWER PLASMA FLASHLIGHT\", 2, 68990)); inquiry.SetCart(cart); //get response Response response = inquiry.GetResponse(); var errors = response.GetErrors(); Assert.IsTrue(errors.Count == 0, String.Join(Environment.NewLine, errors, \"There are errors in response!\")); var auto = response.GetAuto(); Assert.IsTrue(\"R\".Equals(auto), \"Inquiry failed! Approval Status is not equal to R\"); var warnings = response.GetWarnings(); Assert.IsTrue(warnings.Count == 0, String.Join(Environment.NewLine, warnings, \"There are warnings in response!\")); var sid = response.GetSessionId(); Assert.IsTrue(_sid.Equals(sid), \"Inquiry failed! Wrong session ID\"); var orderNum = response.GetOrderNumber(); Assert.IsTrue(_orderNum.Equals(orderNum), \"Inquiry failed! Wrong order number.\"); var rulesTrigg = response.GetRulesTriggered(); Assert.IsTrue(rulesTrigg.Count == 1, \"Inquiry failed! RULES TRIGGERED is not 1\"); } 2. Mode Q call with multiple items in cart. two rules triggered, an optional fields included, approval status of DECLINED is returned public void RisQMultiCartItemsTwoOptionalFieldsTwoRulesDecline() { Inquiry inquiry = TestHelper.CreateInquiry(PTOK, out _sid, out _orderNum); inquiry.SetUserAgent(TestHelper.UAGT); inquiry.SetTotal(123456789); // set CART with one item var cart = new ArrayList(); cart.Add(new CartItem(\"cart item 0 type\", \"cart item 0\", \"cart item 0 description\", 10, 1000)); cart.Add(new CartItem(\"cart item 1 type\", \"cart item 1\", \"cart item 1 description\", 11, 1001)); cart.Add(new CartItem(\"cart item 2 type\", \"cart item 2\", \"cart item 2 description\", 12, 1002)); inquiry.SetCart(cart); //SET Customer User-Agent HTTP header UAGT Response response = inquiry.GetResponse(); // optional getter var errors = response.GetErrors(); Assert.IsTrue(errors.Count == 0, String.Join(Environment.NewLine, errors, \"There are errors in response!\")); var auto = response.GetAuto(); Assert.IsTrue(\"D\".Equals(auto), \"Inquiry failed! Approval Status is not equal to D\"); var warnings = response.GetWarnings(); Assert.IsTrue(warnings.Count == 0, String.Join(Environment.NewLine, warnings, \"There are warnings in response!\")); var rulesTrigg = response.GetRulesTriggered(); Assert.IsTrue(rulesTrigg.Count == 2, \"Inquiry failed! RULES TRIGGERED is not 2\"); } 3. Ris mode Q with user defined fields. approval status of REVIEW is returned public void RisQWithUserDefinedFields() { Inquiry inquiry = TestHelper.CreateInquiry(PTOK, out _sid, out _orderNum); inquiry.SetUserDefinedField(\"ARBITRARY_ALPHANUM_UDF\", \"alphanumeric trigger value\"); inquiry.SetUserDefinedField(\"ARBITRARY_NUMERIC_UDF\", \"777\"); // set CART with one item var cart = new ArrayList(); cart.Add(new CartItem(\"cart item 0 type\", \"cart item 0\", \"cart item 0 description\", 10, 1000)); inquiry.SetCart(cart); Response response = inquiry.GetResponse(); var errors = response.GetErrors(); Assert.IsTrue(errors.Count == 0, String.Join(Environment.NewLine, errors, \"There are errors in response!\")); var auto = response.GetAuto(); Assert.IsTrue(\"R\".Equals(auto), \"Inquiry failed! Approval Status is not equal to R\"); var warnings = response.GetWarnings(); Assert.IsTrue(warnings.Count == 0, String.Join(Environment.NewLine, warnings, \"There are warnings in response!\")); var rulesTrigg = response.GetRulesTriggered(); Assert.IsTrue(rulesTrigg != null && rulesTrigg.Count != 0, \"Inquiry failed! There no RULES_TRIGGERED.\"); List<string> listResponce = new List<string>(Regex.Split(response.ToString(), \"[\\r\\n]+\")); var filteredList = listResponce.FindAll(i => i.Contains(\"RULE_DESCRIPTION\")); Assert.IsTrue(rulesTrigg.Count == filteredList.Count, \"Inquiry failed! Count of RULES_TRIGGERED is wrong!\"); var r1 = filteredList.Find(r => r.Contains(\"review if ARBITRARY_ALPHANUM_UDF contains \\\"trigger\\\"\")); var r2 = filteredList.Find(r => r.Contains(\"review if ARBITRARY_NUMERIC_UDF == 777\")); Assert.IsTrue(r1 != null && r2 != null, \"Inquiry failed! The content of triggered rules are wrong!\"); } 4. Invalid value for a required field is sent, hard error returned public void RisQHardErrorExpected() { Inquiry inquiry = TestHelper.CreateInquiry(PTOK, out _sid, out _orderNum); inquiry.SetParameter(\"PTOK\", Khash.HashPaymentToken(\"BADPTOK\")); inquiry.SetGender('M'); // set CART with one item var cart = new ArrayList(); cart.Add(new CartItem(\"cart item 0 type\", \"cart item 0\", \"cart item 0 description\", 10, 1000)); inquiry.SetCart(cart); Response response = inquiry.GetResponse(); var mode = response.GetMode(); Assert.IsTrue(\"E\".Equals(mode), $\"Update failed! Wrong response mode {mode}.\"); // optional getter var errors = response.GetErrors(); Assert.IsTrue(errors.Count == 1, \"Wrong responce expected error_num: 332, ERROR_COUNT=1\"); var err0 = errors[0]; string errCode = err0.Substring(0, 3); Assert.IsTrue(err0.Contains(\"332 BAD_CARD Cause: [PTOK invalid format], Field: [PTOK], Value: [hidden]\"), $\"Wrong error value: {err0}, expected 332\"); } 5. Warning reported but status of APPROVED returned. two warnings are returned. [UDF_DOESNOTEXIST=>throw a warning please!] [The label [UDF_DOESNOTEXIST] is not defined for merchant ID [999666].] public void RisQWarningApproved() { Inquiry inquiry = TestHelper.CreateInquiry(PTOK, out _sid, out _orderNum); inquiry.SetTotal(1000); inquiry.SetUserDefinedField(\"UDF_DOESNOTEXIST\", \"throw a warning please!\"); // set CART with one item var cart = new ArrayList(); cart.Add(new CartItem(\"cart item 0 type\", \"cart item 0\", \"cart item 0 description\", 10, 1234)); inquiry.SetCart(cart); Response response = inquiry.GetResponse(); var sessID = response.GetSessionId(); var tranID = response.GetTransactionId(); var ordNum = response.GetOrderNumber(); var errors = response.GetErrors(); Assert.IsTrue(errors.Count == 0, String.Join(Environment.NewLine, errors, \"There are errors in response!\")); var auto = response.GetAuto(); Assert.IsTrue(\"A\".Equals(auto), $\"Inquiry failed! Approval status {auto} is not equal to A\"); var warnings = response.GetWarnings(); Assert.IsTrue(warnings.Count == 2, $\"TranID: {tranID} - Wrong number of warnings: {warnings.Count}, expected 2.\"); List<string> listResponce = new List<string>(Regex.Split(response.ToString(), \"[\\r\\n]+\")); var filteredList = listResponce.FindAll(i => i.Contains(\"WARNING_\")); var w1 = filteredList.Find(r => r.Contains(\"[UDF_DOESNOTEXIST=>throw a warning please!]\")); var w2 = filteredList.Find(r => r.Contains(\"[The label [UDF_DOESNOTEXIST] is not defined for merchant ID [999666].]\")); Assert.IsTrue(w1 != null, $\"Inquiry failed! The value {warnings[0]} of warning is wrong!\"); Assert.IsTrue(w2 != null, $\"Inquiry failed! The value {warnings[1]} of warning is wrong!\"); } ### 6. One hard error triggered, one warning triggered. * one error * `332 BAD_CARD Cause: [PTOK invalid format], Field: [PTOK], Value: [hidden]` * two warnings are returned. * `[UDF_DOESNOTEXIST=>throw a warning please!]` * `[The label [UDF_DOESNOTEXIST] is not defined for merchant ID [999666].]` ```cs public void RisQHardSoftErrorsExpected() { Inquiry inquiry = TestHelper.CreateInquiry(PTOK, out _sid, out _orderNum); inquiry.SetParameter(\"PTOK\", Khash.HashPaymentToken(\"BADPTOK\")); inquiry.SetUserDefinedField(\"UDF_DOESNOTEXIST\", \"throw a warning please!\"); // set CART with one item var cart = new ArrayList(); cart.Add(new CartItem(\"cart item 0 type\", \"cart item 0\", \"cart item 0 description\", 10, 1000)); inquiry.SetCart(cart); Response response = inquiry.GetResponse(false); var mode = response.GetMode(); Assert.IsTrue(\"E\".Equals(mode), $\"Update failed! Wrong response mode {mode}.\"); // optional getter var errors = response.GetErrors(); Assert.IsTrue(errors.Count == 1, \"Wrong responce expected error_num: 332, ERROR_COUNT=1\"); var err0 = errors[0]; Assert.IsTrue(err0.Contains(\"332 BAD_CARD Cause: [PTOK invalid format], Field: [PTOK], Value: [hidden]\"), $\"Wrong error content: {err0}, expected 332.\"); var warnings = response.GetWarnings(); Assert.IsTrue(warnings.Count == 2, $\"Wrong number of warnings: {warnings.Count}, expected 2.\"); List<string> listResponce = new List<string>(Regex.Split(response.ToString(), \"[\\r\\n]+\")); var filteredList = listResponce.FindAll(i => i.Contains(\"WARNING_\")); var w1 = filteredList.Find(r => r.Contains(\"[UDF_DOESNOTEXIST=>throw a warning please!]\")); var w2 = filteredList.Find(r => r.Contains(\"[The label [UDF_DOESNOTEXIST] is not defined for merchant ID [999666].]\")); Assert.IsTrue(w1 != null, $\"Inquiry failed! The value {warnings[0]} of warning is wrong!\"); Assert.IsTrue(w2 != null, $\"Inquiry failed! The value {warnings[1]} of warning is wrong!\"); } 7. No Kount Complete rules triggered, two Kount Central rules triggered, Kount Central status of REVIEW KC_TRIGGERED_COUNT : 2 KC_WARNING_COUNT : 0 KC_DECISION : \"R\" KC_EVENT_1_CODE : \"billingToShippingAddressReview\" KC_EVENT_1_DECISION: \"R\" KC_EVENT_2_CODE : \"orderTotalReview\" KC_EVENT_2_DECISION: \"R\" public void RisWTwoKCRulesReview() { Inquiry inquiry = TestHelper.CreateInquiry(PTOK, out _sid, out _orderNum); inquiry.SetMode('W'); inquiry.SetTotal(10001); inquiry.SetKountCentralCustomerId(\"KCentralCustomerOne\"); // set CART with one item var cart = new ArrayList(); cart.Add(new CartItem(\"cart item 0 type\", \"cart item 0\", \"cart item 0 description\", 10, 1234)); inquiry.SetCart(cart); Response response = inquiry.GetResponse(); var sessID = response.GetSessionId(); var tranID = response.GetTransactionId(); var ordNum = response.GetOrderNumber(); var errors = response.GetErrors(); Assert.IsTrue(errors.Count == 0, String.Join(Environment.NewLine, errors, \"There are errors in response!\")); var mode = response.GetMode(); Assert.IsTrue(\"W\".Equals(mode), $\"Update failed! Wrong response mode {mode}.\"); var warnings = response.GetWarnings(); Assert.IsTrue(warnings.Count == 0, String.Join(Environment.NewLine, warnings, \"There are warnings in response!\")); /* \"KC_TRIGGERED_COUNT\": 2 \"KC_WARNING_COUNT\": 0 \"KC_DECISION\": \"R\" \"KC_EVENT_1_CODE\": \"billingToShippingAddressReview\" \"KC_EVENT_1_DECISION\": \"R\" \"KC_EVENT_2_CODE\": \"orderTotalReview\" \"KC_EVENT_2_DECISION\": \"R\" */ var kcCustId = response.GetKountCentralCustomerId(); var kcDecision = response.GetKountCentralDecision(); Assert.IsTrue(\"R\".Equals(kcDecision), $\"Inquiry failed! KC Decision {kcDecision} is not equal to R\"); var kcErrs = response.GetKountCentralErrors(); Assert.IsTrue(kcErrs.Count == 0, $\"Inquiry failed! KC Errors: {String.Join(Environment.NewLine, kcErrs)}\"); var kcWarn = response.GetKountCentralWarnings(); Assert.IsTrue(kcWarn.Count == 0, $\"Inquiry failed! KC Warnings: {String.Join(Environment.NewLine, kcWarn)}\"); var kcEvents = response.GetKountCentralThresholdEvents(); Assert.IsTrue(kcEvents.Count == 2, $\"Inquiry failed! KC Events: {kcEvents.Count} are not 2.\"); Assert.IsTrue(\"R\".Equals(kcEvents[0].Decision), $\"Inquiry failed! Wrong decisions d1 = {kcEvents[0].Decision}, d2 = {kcEvents[1].Decision} by Kount Central ThresholdEvents.\"); Assert.IsTrue(\"R\".Equals(kcEvents[1].Decision), $\"Inquiry failed! Wrong decisions d1 = {kcEvents[0].Decision}, d2 = {kcEvents[1].Decision} by Kount Central ThresholdEvents.\"); var code1 = kcEvents[0].Code; var code2 = kcEvents[1].Code; Assert.IsTrue(\"billingToShippingAddressReview\".Equals(code1) || \"billingToShippingAddressReview\".Equals(code2), $\"Inquiry failed! Wrong KC codes: {code1}, {code2} expected billingToShippingAddressReview.\"); Assert.IsTrue(\"orderTotalReview\".Equals(code1) || \"orderTotalReview\".Equals(code2), $\"Inquiry failed! Wrong KC codes: {code1}, {code2} expected orderTotalReview.\"); } 8. Mode J call one threshold triggered. mode J is returned. KC_TRIGGERED_COUNT : 1 KC_WARNING_COUNT : 0 KC_DECISION : \"D\" KC_EVENT_1_CODE : \"orderTotalDecline\" KC_EVENT_1_DECISION: \"D\" public void RisJOneKountCentralRuleDecline() { Inquiry inquiry = TestHelper.CreateInquiry(PTOK, out _sid, out _orderNum); inquiry.SetMode('J'); inquiry.SetTotal(1000); inquiry.SetKountCentralCustomerId(\"KCentralCustomerDeclineMe\"); // set CART with one item var cart = new ArrayList(); cart.Add(new CartItem(\"cart item 0 type\", \"cart item 0\", \"cart item 0 description\", 10, 1234)); inquiry.SetCart(cart); Response response = inquiry.GetResponse(); // optional getter var errors = response.GetErrors(); Assert.IsTrue(errors.Count == 0, String.Join(Environment.NewLine, errors, \"There are errors in response!\")); var mode = response.GetMode(); Assert.IsTrue(\"J\".Equals(mode), $\"Update failed! Wrong response mode {mode}.\"); var warnings = response.GetWarnings(); Assert.IsTrue(warnings.Count == 0, String.Join(Environment.NewLine, warnings, \"There are warnings in response!\")); /* \"KC_TRIGGERED_COUNT\": 1, \"KC_WARNING_COUNT\": 0, \"KC_DECISION\": \"D\", \"KC_EVENT_1_CODE\": \"orderTotalDecline\", \"KC_EVENT_1_DECISION\": \"D\" */ var kcCustId = response.GetKountCentralCustomerId(); var kcDecision = response.GetKountCentralDecision(); Assert.IsTrue(\"D\".Equals(kcDecision), $\"Inquiry failed! KC Decision {kcDecision} is not equal to D\"); var kcErrs = response.GetKountCentralErrors(); Assert.IsTrue(kcErrs.Count == 0, $\"Inquiry failed! KC Errors: {String.Join(Environment.NewLine, kcErrs)}\"); var kcWarn = response.GetKountCentralWarnings(); Assert.IsTrue(kcWarn.Count == 0, $\"Inquiry failed! KC Warnings: {String.Join(Environment.NewLine, kcWarn)}\"); var kcEvents = response.GetKountCentralThresholdEvents(); Assert.IsTrue(kcEvents.Count == 1, $\"Inquiry failed! KC Events: {kcEvents.Count} are not 1.\"); Assert.IsTrue(\"D\".Equals(kcEvents[0].Decision), $\"Inquiry failed! Wrong decisions d1 = {kcEvents[0].Decision} by Kount Central ThresholdEvents.\"); var code1 = kcEvents[0].Code; Assert.IsTrue(\"orderTotalDecline\".Equals(code1), $\"Inquiry failed! Wrong KC codes: {code1}, expected orderTotalDecline.\"); } 9. Mode U call submits updated values. return values do not include the re-evalued transaction results, public void ModeUAfterModeQ() { Inquiry inquiry = TestHelper.CreateInquiry(PTOK, out _sid, out _orderNum); // set CART with one item var cart = new ArrayList(); cart.Add(new CartItem(\"cart item 0 type\", \"cart item 0\", \"cart item 0 description\", 10, 1234)); inquiry.SetCart(cart); // get response Response response = inquiry.GetResponse(); // optional getter var errors = response.GetErrors(); if (errors.Count > 0) { Assert.IsTrue(false, String.Join(Environment.NewLine, errors)); return; } var sessID = response.GetSessionId(); var tranID = response.GetTransactionId(); var ordNum = response.GetOrderNumber(); // create Update Update update = new Update(); update.SetMode('U'); update.SetVersion(\"0695\"); update.SetMerchantId(TestHelper.TEST_MERCHANT_ID); update.SetApiKey(TestHelper.TEST_API_KEY); update.SetSessionId(sessID); update.SetTransactionId(tranID); update.SetOrderNumber(ordNum); update.SetParameter(\"PTOK\", Khash.HashPaymentToken(\"5386460135176807\")); update.SetPaymentTokenLast4(\"6807\"); update.SetMack('Y'); update.SetAuth('A'); update.SetAvst('M'); update.SetAvsz('M'); update.SetCvvr('M'); response = update.GetResponse(); errors = response.GetErrors(); Assert.IsTrue(errors.Count == 0, String.Join(Environment.NewLine, errors, \"There are errors in response!\")); var mode = response.GetMode(); Assert.IsTrue(\"U\".Equals(mode), $\"Update failed! Wrong response mode {mode}.\"); Assert.IsTrue(sessID.Equals(response.GetSessionId()), $\"Update failed! Wrong session ID {sessID}.\"); Assert.IsTrue(tranID.Equals(response.GetTransactionId()), $\"Update failed! Wrong Transaction Id {tranID}.\"); var ordU = response.GetOrderNumber(); // orderNum is null var auto = response.GetAuto(); Assert.IsTrue(auto == null, $\"Inquiry failed! Approval status {auto} is not null\"); var scor = response.GetScore(); Assert.IsTrue(scor == null, $\"Inquiry failed! Score {scor} is not null\"); var geox = response.GetGeox(); Assert.IsTrue(geox == null, $\"Inquiry failed! GEOX {geox} is not null\"); } 10. Mode X call submits updated values. return values include all mode Q values, re-evaluated for updated data, To test, submit a default value mode Q transaction, capture TRAN , SESS , ORDR values, and then use those to submit a mode X public void ModeXAfterModeQ() { Inquiry inquiry = TestHelper.CreateInquiry(PTOK, out _sid, out _orderNum); // set CART with one item var cart = new ArrayList(); cart.Add(new CartItem(\"cart item 0 type\", \"cart item 0\", \"cart item 0 description\", 10, 1234)); inquiry.SetCart(cart); // get response Response response = inquiry.GetResponse(); // optional getter var errors = response.GetErrors(); if (errors.Count > 0) { Assert.IsTrue(false, String.Join(Environment.NewLine, errors)); return; } var sessID = response.GetSessionId(); var tranID = response.GetTransactionId(); var ordNum = response.GetOrderNumber(); // create update Update update = new Update(); update.SetMode('X'); update.SetVersion(\"0695\"); update.SetMerchantId(TestHelper.TEST_MERCHANT_ID); update.SetApiKey(TestHelper.TEST_API_KEY); update.SetSessionId(sessID); update.SetTransactionId(tranID); update.SetOrderNumber(ordNum); update.SetPaymentTokenLast4(\"6807\"); update.SetMack('Y'); update.SetAuth('A'); update.SetAvst('M'); update.SetAvsz('M'); update.SetCvvr('M'); response = update.GetResponse(); errors = response.GetErrors(); Assert.IsTrue(errors.Count == 0, String.Join(Environment.NewLine, errors, \"There are errors in response!\")); var mode = response.GetMode(); Assert.IsTrue(\"X\".Equals(mode), $\"Update failed! Wrong response mode {mode}.\"); var sID = response.GetSessionId(); Assert.IsTrue(sessID.Equals(sID), $\"Update failed! Wrong session ID {sID}.\"); var tId = response.GetTransactionId(); Assert.IsTrue(tranID.Equals(tId), $\"Update failed! Wrong Transaction Id {tranID}.\"); var ordU = response.GetOrderNumber(); Assert.IsTrue(ordNum.Equals(ordU), $\"Update failed! Wrong Order Number {ordNum}.\"); var auto = response.GetAuto(); Assert.IsTrue(auto != null, $\"Update failed! AUTO not presented in response.\"); var scor = response.GetScore(); Assert.IsTrue(scor != null, $\"Update failed! SCOR not presented in response.\"); var geox = response.GetGeox(); Assert.IsTrue(geox != null, $\"Update failed! GEOX not presented in response.\"); } 11. Approval status of APPROVED returned. mode P is returned. public void ModeP() { Inquiry inquiry = TestHelper.CreateInquiry(PTOK, out _sid, out _orderNum); inquiry.SetAnid(\"2085551212\"); inquiry.SetMode('P'); inquiry.SetTotal(1000); // set CART with one item var cart = new ArrayList(); cart.Add(new CartItem(\"cart item 0 type\", \"cart item 0\", \"cart item 0 description\", 10, 1234)); inquiry.SetCart(cart); Response response = inquiry.GetResponse(); // optional getter var errors = response.GetErrors(); Assert.IsTrue(errors.Count == 0, String.Join(Environment.NewLine, errors, \"There are errors in response!\")); var mode = response.GetMode(); Assert.IsTrue(\"P\".Equals(mode), $\"Update failed! Wrong response mode {mode}.\"); var auto = response.GetAuto(); Assert.IsTrue(\"A\".Equals(auto), $\"Inquiry failed! Approval status {auto} is wrong, expected 'A'.\"); } Predictive Response Tests Predictive Response is a mechanism that can be used by Kount merchants to submit test requests and receive back predictable RIS responses. This means that a merchant, in order to test RIS, can generate a particular request that is designed to provide one or more specific RIS responses and/or errors. The predictive response inquiries are not actual RIS inquiries, which means the data will never be submitted to the database and will not be displayed in the Agent Web Console. The primary reason for having Predictive Response functionality is to diagnose error responses being received from RIS. For instance, a merchant may receive a large number of different error codes after submitting a RIS request. Most of these errors can be reliably reproduced by passing malformed, missing, or additional data in the RIS request. However, some of the errors are extremely difficult or even impossible to reproduce through simple means. There is no way to re-create these errors in a systematic or predictable fashion using RIS request input, rules, and/or Data Collector. Merchant Id : 999667 Authentication key: provided by Kount 1. Expected Score=42 and expected Decision = R Input to predictive response, UDF[~K!_SCOR] = 42 Produces RIS output, SCOR=42 Input to predictive response, UDF[~K!_AUTO] = R Produces RIS output, AUTO=R Email input will need to be, EMAL=predictive @kount.com public void PredictiveResponseScore42AutoR() { Inquiry inquiry = CreateInquiry(); inquiry.SetUserDefinedField(\"~K!_SCOR\", \"42\"); inquiry.SetUserDefinedField(\"~K!_AUTO\", \"R\"); // set CART with one item var cart = new ArrayList(); cart.Add(new CartItem(\"cart item 0 type\", \"cart item 0\", \"cart item 0 description\", 10, 1000)); inquiry.SetCart(cart); Response response = inquiry.GetResponse(); // optional getter var errors = response.GetErrors(); Assert.IsTrue(errors.Count == 0, String.Join(Environment.NewLine, errors, \"There are errors in response!\")); var score = response.GetScore(); Assert.IsTrue(\"42\".Equals(score), \"Inquiry failed! Expected Score=42.\"); var auto = response.GetAuto(); Assert.IsTrue(\"R\".Equals(auto), \"Inquiry failed! Expected Decision=R\"); } 2. Expected Score=42 and expected Decision = D Input to predictive response, UDF[~K!_SCOR] = 42 Produces RIS output, SCOR=42 Input to predictive response, UDF[~K!_AUTO] = D Produces RIS output, AUTO=D Input to predictive response, UDF[~K!_GEOX]=NG Email input will need to be, EMAL=predictive @kount.com public void PredictiveResponseScore42AutoD() { Inquiry inquiry = CreateInquiry(); inquiry.SetUserDefinedField(\"~K!_SCOR\", \"42\"); inquiry.SetUserDefinedField(\"~K!_AUTO\", \"D\"); inquiry.SetUserDefinedField(\"~K!_GEOX\", \"NG\"); // set CART with one item var cart = new ArrayList(); cart.Add(new CartItem(\"cart item 0 type\", \"cart item 0\", \"cart item 0 description\", 10, 1000)); inquiry.SetCart(cart); Response response = inquiry.GetResponse(); // optional getter var errors = response.GetErrors(); Assert.IsTrue(errors.Count == 0, String.Join(Environment.NewLine, errors, \"There are errors in response!\")); var score = response.GetScore(); Assert.IsTrue(\"42\".Equals(score), \"Inquiry failed! Expected Score=42.\"); var auto = response.GetAuto(); Assert.IsTrue(\"D\".Equals(auto), \"Inquiry failed! Expected Decision=D\"); var geox = response.GetGeox(); Assert.IsTrue(\"NG\".Equals(geox), \"Inquiry failed! Expected GEOX=NG\"); } 3. Expected Score=18 Input to predictive response, UDF[~K!_SCOR] = 18 Produces RIS output, MODE=E and ERRO=601 Email input will need to be, EMAL=predictive @kount.com public void PredictiveResponseScore18ModeE() { Inquiry inquiry = CreateInquiry(); inquiry.SetUserDefinedField(\"~K!_SCOR\", \"18\"); inquiry.SetUserDefinedField(\"~K!_AUTO\", \"E\"); inquiry.SetUserDefinedField(\"~K!_ERRO\", \"601\"); // set CART with one item var cart = new ArrayList(); cart.Add(new CartItem(\"cart item 0 type\", \"cart item 0\", \"cart item 0 description\", 10, 1000)); inquiry.SetCart(cart); Response response = inquiry.GetResponse(); // optional getter var errors = response.GetErrors(); Assert.IsTrue(errors.Count == 1, String.Join(Environment.NewLine, errors, \"Errors are not equals to 1!\")); var mode = response.GetMode(); Assert.IsTrue(\"E\".Equals(mode), \"Inquiry failed! Expected Mode=E\"); var err0 = errors[0]; string errCode = err0.Substring(0, 3); Assert.IsTrue(\"601\".Equals(errCode), \"Inquiry failed! Expected ERRO=601\"); } Custom Merchant ID and API Key One integration test allows a Developer to set customer(new merchant) credentials in config project file. This test is geared toward ensuring the customer's credentials are valid, but doesn't depend on a RuleSet being in a specific state."
  },
  "articles/testHelper_class.html": {
    "href": "articles/testHelper_class.html",
    "title": "| Kount SDK .NET",
    "keywords": "public class TestHelper { /// <summary> /// Payment Type /// </summary> public const string PTYP_CARD = \"CARD\"; public const string TEST_API_KEY = \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiI5OTk2NjYiLCJhdWQiOiJLb3VudC4xIiwiaWF0IjoxNDg4NTYzMzgzLCJzY3AiOnsia2EiOm51bGwsImtjIjpudWxsLCJhcGkiOmZhbHNlLCJyaXMiOnRydWV9fQ.u8ycf3GuUKKHpNsR8BL40VxLDGFMEpO59k6cYcku9Tc\"; public const int TEST_MERCHANT_ID = 999666; /// <summary> /// Customer User-Agent HTTP header /// </summary> public const string UAGT = \"Mozilla/5.0(Macintosh; Intel Mac OSX 10_9_5)AppleWebKit/537.36(KHTML, like Gecko)Chrome/37.0.2062.124Safari/537.36\"; /// <summary> /// Authorization Status returned to merchant from processor. /// </summary> private const char AUTH = 'A'; /// <summary> /// Address Verification System Street verification response returned to merchant from processor. /// </summary> private const char AVST = 'M'; /// <summary> /// Address Verification System Zip Code verification response returned to merchant from processor. /// </summary> private const char AVSZ = 'M'; /// <summary> /// Billing street address - Line 1 /// </summary> private const string B2A1 = \"1234 North B2A1 Tree Lane South\"; /// <summary> /// Billing street address - Line 2 /// </summary> private const string B2A2 = \"\"; /// <summary> /// Billing address - Counry Code /// </summary> private const string B2CC = \"US\"; /// <summary> /// Billing address - City /// </summary> private const string B2CI = \"Albuquerque\"; /// <summary> /// Billing address - Postal Code /// </summary> private const string B2PC = \"87101\"; /// <summary> /// Billing address - Phone Number /// </summary> private const string B2PN = \"555-867-5309\"; /// <summary> /// Billing address - State/Province /// </summary> private const string B2ST = \"NM\"; /// <summary> /// Total cash amount in currency submitted /// </summary> private const int CASH = 4444; /// <summary> /// Currency /// </summary> private const string CURR = \"USD\"; /// <summary> /// Card Verification Value response returned to merchant from processor. /// </summary> private const char CVVR = 'M'; /// <summary> /// Email /// </summary> private const string EMAIL = \"sdkTest@kountsdktestdomain.com\"; /// <summary> /// Dotted Decimal IPv4 address that the merchant sees coming from the customer. /// </summary> private const string IPAD = \"131.206.45.21\"; /// <summary> /// Last 4 numbers of Credit Card Value /// </summary> private const string LAST4 = \"2514\"; /// <summary> /// Merchants acknowledgement to ship/process the order /// </summary> private const char MACK = 'Y'; /// <summary> /// Risk Inquiry Service Mode /// </summary> private const char MODE = 'Q'; /// <summary> /// Name of Merchant /// </summary> private const string NAME = \"SdkTestFirstName SdkTestLastName\"; /// <summary> /// Card definitions /// </summary> private const string PROD_DESCR_0 = \"3000 CANDLEPOWER PLASMA FLASHLIGHT\"; private const string PROD_ITEM_0 = \"SG999999\"; private const long PROD_PRICE_0 = 68990; private const long PROD_QUANT_0 = 2; private const string PROD_TYPE_0 = \"SPORTING_GOODS\"; /// <summary> /// Shipping Address Recipient address - Line 1 /// </summary> private const string S2A1 = \"567 West S2A1 Court North\"; /// <summary> /// Shipping Recipient street address - Line 2 /// </summary> private const string S2A2 = \"\"; /// <summary> /// Shipping Address Recipient - Counry Code /// </summary> private const string S2CC = \"US\"; /// <summary> /// Shipping Address Recipient - City /// </summary> private const string S2CI = \"Gnome\"; /// <summary> /// Shipping Address - Email address of Recipient /// </summary> private const string S2EM = \"sdkTestShipToEmail@kountsdktestdomain.com\"; /// <summary> /// Shipping Address - Name of Recipient /// </summary> private const string S2NM = \"SdkShipToFN SdkShipToLN\"; /// <summary> /// Shipping Address Recipient - Postal Code /// </summary> private const string S2PC = \"99762\"; /// <summary> /// Shipping Address Recipient - Phone Number /// </summary> private const string S2PN = \"555-777-1212\"; /// <summary> /// Shipping Address Recipient - State/Province /// </summary> private const string S2ST = \"AK\"; /// <summary> /// Name of Web site /// </summary> private const string SITE = \"DEFAULT\"; /// <summary> /// Total amount in currency submitted in lowest currency factor /// </summary> private const int TOTL = 123456; /// <summary> /// Create inquiry /// </summary> /// <param name=\"cardNumber\">card number</param> /// <param name=\"sid\">session id</param> /// <param name=\"orderNum\">order number</param> /// <returns>inquiry</returns> public static Inquiry CreateInquiry(string cardNumber, out string sid, out string orderNum) { Inquiry inquiry = DefaultInquiry(out sid, out orderNum); inquiry.SetCardPayment(cardNumber); return inquiry; } /// <summary> /// Create masked inquiry /// </summary> /// <param name=\"cardNumber\">card number</param> /// <param name=\"sid\">session id</param> /// <param name=\"orderNum\">order number</param> /// <returns>masked inquiry</returns> public static Inquiry CreateInquiryMasked(string cardNumber, out string sid, out string orderNum) { Inquiry inquiry = DefaultInquiry(out sid, out orderNum); inquiry.SetCardPaymentMasked(cardNumber); return inquiry; } /// <summary> /// Create inquiry with default settings /// </summary> /// <param name=\"sid\">session id</param> /// <param name=\"orderNum\">order number</param> /// <returns>inquiry with default settings</returns> public static Inquiry DefaultInquiry(out string sid, out string orderNum) { Inquiry inquiry = new Inquiry(); inquiry.SetMerchantId(TEST_MERCHANT_ID); // 999666 inquiry.SetApiKey(TEST_API_KEY); sid = Guid.NewGuid().ToString().Replace(\"-\", String.Empty); inquiry.SetSessionId(sid); var uniq = sid.Substring(0, 20); //Fist 20 chars from sid orderNum = uniq.Substring(0, 10); inquiry.SetUnique(uniq); inquiry.SetOrderNumber(orderNum); inquiry.SetName(NAME); inquiry.SetEmail(EMAIL); //set billing address inquiry.SetBillingAddress(B2A1, B2A2, B2CI, B2ST, B2PC, B2CC); inquiry.SetBillingPhoneNumber(B2PN); //set shipping address inquiry.SetShippingAddress(S2A1, S2A2, S2CI, S2ST, S2PC, S2CC); inquiry.SetShippingPhoneNumber(S2PN); inquiry.SetMode(MODE); inquiry.SetTotal(TOTL); inquiry.SetCash(CASH); inquiry.SetIpAddress(IPAD); inquiry.SetMack(MACK); inquiry.SetAuth(AUTH); inquiry.SetAvst(AVST); inquiry.SetAvsz(AVSZ); inquiry.SetCvvr(CVVR); inquiry.SetWebsite(SITE); inquiry.SetCurrency(CURR); return inquiry; } }"
  },
  "api/Kount.SimpleLogger.html": {
    "href": "api/Kount.SimpleLogger.html",
    "title": "Namespace Kount.SimpleLogger | Kount SDK .NET",
    "keywords": "Namespace Kount.SimpleLogger Classes File A simple file logger. Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2010 Keynetics Inc"
  },
  "api/Kount.Log.Binding.ILogger.html": {
    "href": "api/Kount.Log.Binding.ILogger.html",
    "title": "Interface ILogger | Kount SDK .NET",
    "keywords": "Interface ILogger Logger interface. Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2010 Keynetics Inc Namespace :Kount.Log.Binding Assembly :KountRisSdk.dll Syntax public interface ILogger Methods Debug(String) Log a debug level message. Declaration void Debug(string message) Parameters Type Name Description System.String message Message to log Debug(String, Exception) Log a debug level message and an exception. Declaration void Debug(string message, Exception e) Parameters Type Name Description System.String message Message to log Exception e Exception to log Error(String) Log an error level message Declaration void Error(string message) Parameters Type Name Description System.String message Message to log Error(String, Exception) Log an error level message and an exception. Declaration void Error(string message, Exception e) Parameters Type Name Description System.String message Message to log Exception e Exception to log Fatal(String) Log a fatal level message Declaration void Fatal(string message) Parameters Type Name Description System.String message Message to log Fatal(String, Exception) Log a fatal level message and an exception. Declaration void Fatal(string message, Exception e) Parameters Type Name Description System.String message Message to log Exception e Exception to log Info(String) Log an info level message Declaration void Info(string message) Parameters Type Name Description System.String message Message to log Info(String, Exception) Log an info level message and an exception. Declaration void Info(string message, Exception e) Parameters Type Name Description System.String message Message to log Exception e Exception to log Warn(String) Log a warn level message Declaration void Warn(string message) Parameters Type Name Description System.String message Message to log Warn(String, Exception) Log a warn level message and an exception. Declaration void Warn(string message, Exception e) Parameters Type Name Description System.String message Message to log Exception e Exception to log"
  },
  "api/Kount.Log.html": {
    "href": "api/Kount.Log.html",
    "title": "Namespace Kount.Log | Kount SDK .NET",
    "keywords": "Namespace Kount.Log Classes ExampleClient A class demonstrating how to use logging"
  },
  "api/Kount.Log.Factory.ILoggerFactory.html": {
    "href": "api/Kount.Log.Factory.ILoggerFactory.html",
    "title": "Interface ILoggerFactory | Kount SDK .NET",
    "keywords": "Interface ILoggerFactory Interface for a logger factory. Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2010 Keynetics Inc Namespace :Kount.Log.Factory Assembly :KountRisSdk.dll Syntax public interface ILoggerFactory Methods GetLogger(String) Get a logger binding. Declaration ILogger GetLogger(string name) Parameters Type Name Description System.String name Name of the logger Returns Type Description ILogger A Kount.Log.Binding.Logger"
  },
  "api/Kount.Ris.ValidationError.html": {
    "href": "api/Kount.Ris.ValidationError.html",
    "title": "Class ValidationError | Kount SDK .NET",
    "keywords": "Class ValidationError A class representing a RIS SDK client side validation error. Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2010 Keynetics Inc Inheritance System.Object ValidationError Namespace :Kount.Ris Assembly :KountRisSdk.dll Syntax public class ValidationError : object Constructors ValidationError(String, String) Constructor for missing required field. Declaration public ValidationError(string field, string mode) Parameters Type Name Description System.String field The name of the bad field System.String mode The RIS mode the field is associated with ValidationError(String, String, Int32) Constructor for maximum length error. Declaration public ValidationError(string field, string value, int length) Parameters Type Name Description System.String field The name of the bad field System.String value The value of the field System.Int32 length The maximum allowable length ValidationError(String, String, String) Constructor for regular expression error. Declaration public ValidationError(string field, string value, string pattern) Parameters Type Name Description System.String field The name of the bad field System.String value The value of the field System.String pattern The regular expression violated Methods ToString() Get the string representation of the error. Declaration public override string ToString() Returns Type Description System.String Error message string"
  },
  "api/Kount.Log.Binding.html": {
    "href": "api/Kount.Log.Binding.html",
    "title": "Namespace Kount.Log.Binding | Kount SDK .NET",
    "keywords": "Namespace Kount.Log.Binding Classes NopLogger A logger that silently discards all logging. Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2010 Keynetics Inc SimpleLogger Facade class to a simple file logger. Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2010 Keynetics Inc Interfaces ILogger Logger interface. Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2010 Keynetics Inc"
  },
  "api/Kount.Util.html": {
    "href": "api/Kount.Util.html",
    "title": "Namespace Kount.Util | Kount SDK .NET",
    "keywords": "Namespace Kount.Util Classes Khash Class for creating Kount RIS KHASH encoding payment tokens. Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2011 Kount Inc. All Rights Reserved."
  },
  "api/Kount.Log.Factory.LogFactory.html": {
    "href": "api/Kount.Log.Factory.LogFactory.html",
    "title": "Class LogFactory | Kount SDK .NET",
    "keywords": "Class LogFactory A factory class for creating LoggerFactory objects. Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2010 Keynetics Inc Inheritance System.Object LogFactory Namespace :Kount.Log.Factory Assembly :KountRisSdk.dll Syntax public class LogFactory : object Methods GetLoggerFactory() Get the logger factory to be used. NOP is default logger factory if not defined in application configuration. Declaration public static ILoggerFactory GetLoggerFactory() Returns Type Description ILoggerFactory A Kount.Log.Factory.LoggerFactory SetLoggerFactory(ILoggerFactory) Set the logger factory to be used. Declaration public static void SetLoggerFactory(ILoggerFactory f) Parameters Type Name Description ILoggerFactory f A Kount.Log.Factory.LoggerFactory"
  },
  "api/Kount.Log.Factory.html": {
    "href": "api/Kount.Log.Factory.html",
    "title": "Namespace Kount.Log.Factory | Kount SDK .NET",
    "keywords": "Namespace Kount.Log.Factory Classes LogFactory A factory class for creating LoggerFactory objects. Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2010 Keynetics Inc NopLoggerFactory A NOP logger binding class. Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2010 Keynetics Inc SimpleLoggerFactory A simple logger binding class. Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2010 Keynetics Inc Interfaces ILoggerFactory Interface for a logger factory. Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2010 Keynetics Inc"
  },
  "api/Kount.Ris.html": {
    "href": "api/Kount.Ris.html",
    "title": "Namespace Kount.Ris | Kount SDK .NET",
    "keywords": "Namespace Kount.Ris Classes CartItem Shopping cart item data object. Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2010 Keynetics Inc IllegalArgumentException Kount Ris Illegal argument exception. Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2010 Keynetics Inc Inquiry Inquiry class. A bunch of setters for sending initial transaction data to a Kount RIS server. Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2010 Keynetics Inc KcEvent Kount Central Event class description Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2014 Keynetics Inc Request Abstract parent class for request objects. Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2010 Keynetics Inc RequestException Request Exception. Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2010 Keynetics Inc Response Response immutable data object containing data from the RIS server. Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2010 Keynetics Inc RSA RSA Utility class for encrypting PANs Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2010 Keynetics Inc Update Update class. A bunch of setters for sending transaction update data to a Kount RIS server. Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2010 Keynetics Inc ValidationError A class representing a RIS SDK client side validation error. Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2010 Keynetics Inc ValidationException Validation Exception. Author: Kount custserv@kount.com ; Version: 6.5.0. Copyright: 2010 Keynetics Inc"
  }
}